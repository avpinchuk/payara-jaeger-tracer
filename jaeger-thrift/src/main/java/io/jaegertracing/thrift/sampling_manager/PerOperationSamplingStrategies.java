/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.thrift.sampling_manager;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-08-03")
public class PerOperationSamplingStrategies implements org.apache.thrift.TBase<PerOperationSamplingStrategies, PerOperationSamplingStrategies._Fields>, java.io.Serializable, Cloneable, Comparable<PerOperationSamplingStrategies> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PerOperationSamplingStrategies");

  private static final org.apache.thrift.protocol.TField DEFAULT_SAMPLING_PROBABILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultSamplingProbability", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField DEFAULT_LOWER_BOUND_TRACES_PER_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultLowerBoundTracesPerSecond", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField PER_OPERATION_STRATEGIES_FIELD_DESC = new org.apache.thrift.protocol.TField("perOperationStrategies", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_UPPER_BOUND_TRACES_PER_SECOND_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultUpperBoundTracesPerSecond", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PerOperationSamplingStrategiesStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PerOperationSamplingStrategiesTupleSchemeFactory();

  public double defaultSamplingProbability; // required
  public double defaultLowerBoundTracesPerSecond; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<OperationSamplingStrategy> perOperationStrategies; // required
  public double defaultUpperBoundTracesPerSecond; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEFAULT_SAMPLING_PROBABILITY((short)1, "defaultSamplingProbability"),
    DEFAULT_LOWER_BOUND_TRACES_PER_SECOND((short)2, "defaultLowerBoundTracesPerSecond"),
    PER_OPERATION_STRATEGIES((short)3, "perOperationStrategies"),
    DEFAULT_UPPER_BOUND_TRACES_PER_SECOND((short)4, "defaultUpperBoundTracesPerSecond");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFAULT_SAMPLING_PROBABILITY
          return DEFAULT_SAMPLING_PROBABILITY;
        case 2: // DEFAULT_LOWER_BOUND_TRACES_PER_SECOND
          return DEFAULT_LOWER_BOUND_TRACES_PER_SECOND;
        case 3: // PER_OPERATION_STRATEGIES
          return PER_OPERATION_STRATEGIES;
        case 4: // DEFAULT_UPPER_BOUND_TRACES_PER_SECOND
          return DEFAULT_UPPER_BOUND_TRACES_PER_SECOND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEFAULTSAMPLINGPROBABILITY_ISSET_ID = 0;
  private static final int __DEFAULTLOWERBOUNDTRACESPERSECOND_ISSET_ID = 1;
  private static final int __DEFAULTUPPERBOUNDTRACESPERSECOND_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEFAULT_UPPER_BOUND_TRACES_PER_SECOND};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFAULT_SAMPLING_PROBABILITY, new org.apache.thrift.meta_data.FieldMetaData("defaultSamplingProbability", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFAULT_LOWER_BOUND_TRACES_PER_SECOND, new org.apache.thrift.meta_data.FieldMetaData("defaultLowerBoundTracesPerSecond", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PER_OPERATION_STRATEGIES, new org.apache.thrift.meta_data.FieldMetaData("perOperationStrategies", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OperationSamplingStrategy.class))));
    tmpMap.put(_Fields.DEFAULT_UPPER_BOUND_TRACES_PER_SECOND, new org.apache.thrift.meta_data.FieldMetaData("defaultUpperBoundTracesPerSecond", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PerOperationSamplingStrategies.class, metaDataMap);
  }

  public PerOperationSamplingStrategies() {
  }

  public PerOperationSamplingStrategies(
    double defaultSamplingProbability,
    double defaultLowerBoundTracesPerSecond,
    java.util.List<OperationSamplingStrategy> perOperationStrategies)
  {
    this();
    this.defaultSamplingProbability = defaultSamplingProbability;
    setDefaultSamplingProbabilityIsSet(true);
    this.defaultLowerBoundTracesPerSecond = defaultLowerBoundTracesPerSecond;
    setDefaultLowerBoundTracesPerSecondIsSet(true);
    this.perOperationStrategies = perOperationStrategies;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PerOperationSamplingStrategies(PerOperationSamplingStrategies other) {
    __isset_bitfield = other.__isset_bitfield;
    this.defaultSamplingProbability = other.defaultSamplingProbability;
    this.defaultLowerBoundTracesPerSecond = other.defaultLowerBoundTracesPerSecond;
    if (other.isSetPerOperationStrategies()) {
      java.util.List<OperationSamplingStrategy> __this__perOperationStrategies = new java.util.ArrayList<OperationSamplingStrategy>(other.perOperationStrategies.size());
      for (OperationSamplingStrategy other_element : other.perOperationStrategies) {
        __this__perOperationStrategies.add(new OperationSamplingStrategy(other_element));
      }
      this.perOperationStrategies = __this__perOperationStrategies;
    }
    this.defaultUpperBoundTracesPerSecond = other.defaultUpperBoundTracesPerSecond;
  }

  public PerOperationSamplingStrategies deepCopy() {
    return new PerOperationSamplingStrategies(this);
  }

  @Override
  public void clear() {
    setDefaultSamplingProbabilityIsSet(false);
    this.defaultSamplingProbability = 0.0;
    setDefaultLowerBoundTracesPerSecondIsSet(false);
    this.defaultLowerBoundTracesPerSecond = 0.0;
    this.perOperationStrategies = null;
    setDefaultUpperBoundTracesPerSecondIsSet(false);
    this.defaultUpperBoundTracesPerSecond = 0.0;
  }

  public double getDefaultSamplingProbability() {
    return this.defaultSamplingProbability;
  }

  public PerOperationSamplingStrategies setDefaultSamplingProbability(double defaultSamplingProbability) {
    this.defaultSamplingProbability = defaultSamplingProbability;
    setDefaultSamplingProbabilityIsSet(true);
    return this;
  }

  public void unsetDefaultSamplingProbability() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEFAULTSAMPLINGPROBABILITY_ISSET_ID);
  }

  /** Returns true if field defaultSamplingProbability is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultSamplingProbability() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEFAULTSAMPLINGPROBABILITY_ISSET_ID);
  }

  public void setDefaultSamplingProbabilityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEFAULTSAMPLINGPROBABILITY_ISSET_ID, value);
  }

  public double getDefaultLowerBoundTracesPerSecond() {
    return this.defaultLowerBoundTracesPerSecond;
  }

  public PerOperationSamplingStrategies setDefaultLowerBoundTracesPerSecond(double defaultLowerBoundTracesPerSecond) {
    this.defaultLowerBoundTracesPerSecond = defaultLowerBoundTracesPerSecond;
    setDefaultLowerBoundTracesPerSecondIsSet(true);
    return this;
  }

  public void unsetDefaultLowerBoundTracesPerSecond() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEFAULTLOWERBOUNDTRACESPERSECOND_ISSET_ID);
  }

  /** Returns true if field defaultLowerBoundTracesPerSecond is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultLowerBoundTracesPerSecond() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEFAULTLOWERBOUNDTRACESPERSECOND_ISSET_ID);
  }

  public void setDefaultLowerBoundTracesPerSecondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEFAULTLOWERBOUNDTRACESPERSECOND_ISSET_ID, value);
  }

  public int getPerOperationStrategiesSize() {
    return (this.perOperationStrategies == null) ? 0 : this.perOperationStrategies.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<OperationSamplingStrategy> getPerOperationStrategiesIterator() {
    return (this.perOperationStrategies == null) ? null : this.perOperationStrategies.iterator();
  }

  public void addToPerOperationStrategies(OperationSamplingStrategy elem) {
    if (this.perOperationStrategies == null) {
      this.perOperationStrategies = new java.util.ArrayList<OperationSamplingStrategy>();
    }
    this.perOperationStrategies.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<OperationSamplingStrategy> getPerOperationStrategies() {
    return this.perOperationStrategies;
  }

  public PerOperationSamplingStrategies setPerOperationStrategies(@org.apache.thrift.annotation.Nullable java.util.List<OperationSamplingStrategy> perOperationStrategies) {
    this.perOperationStrategies = perOperationStrategies;
    return this;
  }

  public void unsetPerOperationStrategies() {
    this.perOperationStrategies = null;
  }

  /** Returns true if field perOperationStrategies is set (has been assigned a value) and false otherwise */
  public boolean isSetPerOperationStrategies() {
    return this.perOperationStrategies != null;
  }

  public void setPerOperationStrategiesIsSet(boolean value) {
    if (!value) {
      this.perOperationStrategies = null;
    }
  }

  public double getDefaultUpperBoundTracesPerSecond() {
    return this.defaultUpperBoundTracesPerSecond;
  }

  public PerOperationSamplingStrategies setDefaultUpperBoundTracesPerSecond(double defaultUpperBoundTracesPerSecond) {
    this.defaultUpperBoundTracesPerSecond = defaultUpperBoundTracesPerSecond;
    setDefaultUpperBoundTracesPerSecondIsSet(true);
    return this;
  }

  public void unsetDefaultUpperBoundTracesPerSecond() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEFAULTUPPERBOUNDTRACESPERSECOND_ISSET_ID);
  }

  /** Returns true if field defaultUpperBoundTracesPerSecond is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultUpperBoundTracesPerSecond() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEFAULTUPPERBOUNDTRACESPERSECOND_ISSET_ID);
  }

  public void setDefaultUpperBoundTracesPerSecondIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEFAULTUPPERBOUNDTRACESPERSECOND_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case DEFAULT_SAMPLING_PROBABILITY:
      if (value == null) {
        unsetDefaultSamplingProbability();
      } else {
        setDefaultSamplingProbability((java.lang.Double)value);
      }
      break;

    case DEFAULT_LOWER_BOUND_TRACES_PER_SECOND:
      if (value == null) {
        unsetDefaultLowerBoundTracesPerSecond();
      } else {
        setDefaultLowerBoundTracesPerSecond((java.lang.Double)value);
      }
      break;

    case PER_OPERATION_STRATEGIES:
      if (value == null) {
        unsetPerOperationStrategies();
      } else {
        setPerOperationStrategies((java.util.List<OperationSamplingStrategy>)value);
      }
      break;

    case DEFAULT_UPPER_BOUND_TRACES_PER_SECOND:
      if (value == null) {
        unsetDefaultUpperBoundTracesPerSecond();
      } else {
        setDefaultUpperBoundTracesPerSecond((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFAULT_SAMPLING_PROBABILITY:
      return getDefaultSamplingProbability();

    case DEFAULT_LOWER_BOUND_TRACES_PER_SECOND:
      return getDefaultLowerBoundTracesPerSecond();

    case PER_OPERATION_STRATEGIES:
      return getPerOperationStrategies();

    case DEFAULT_UPPER_BOUND_TRACES_PER_SECOND:
      return getDefaultUpperBoundTracesPerSecond();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DEFAULT_SAMPLING_PROBABILITY:
      return isSetDefaultSamplingProbability();
    case DEFAULT_LOWER_BOUND_TRACES_PER_SECOND:
      return isSetDefaultLowerBoundTracesPerSecond();
    case PER_OPERATION_STRATEGIES:
      return isSetPerOperationStrategies();
    case DEFAULT_UPPER_BOUND_TRACES_PER_SECOND:
      return isSetDefaultUpperBoundTracesPerSecond();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PerOperationSamplingStrategies)
      return this.equals((PerOperationSamplingStrategies)that);
    return false;
  }

  public boolean equals(PerOperationSamplingStrategies that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_defaultSamplingProbability = true;
    boolean that_present_defaultSamplingProbability = true;
    if (this_present_defaultSamplingProbability || that_present_defaultSamplingProbability) {
      if (!(this_present_defaultSamplingProbability && that_present_defaultSamplingProbability))
        return false;
      if (this.defaultSamplingProbability != that.defaultSamplingProbability)
        return false;
    }

    boolean this_present_defaultLowerBoundTracesPerSecond = true;
    boolean that_present_defaultLowerBoundTracesPerSecond = true;
    if (this_present_defaultLowerBoundTracesPerSecond || that_present_defaultLowerBoundTracesPerSecond) {
      if (!(this_present_defaultLowerBoundTracesPerSecond && that_present_defaultLowerBoundTracesPerSecond))
        return false;
      if (this.defaultLowerBoundTracesPerSecond != that.defaultLowerBoundTracesPerSecond)
        return false;
    }

    boolean this_present_perOperationStrategies = true && this.isSetPerOperationStrategies();
    boolean that_present_perOperationStrategies = true && that.isSetPerOperationStrategies();
    if (this_present_perOperationStrategies || that_present_perOperationStrategies) {
      if (!(this_present_perOperationStrategies && that_present_perOperationStrategies))
        return false;
      if (!this.perOperationStrategies.equals(that.perOperationStrategies))
        return false;
    }

    boolean this_present_defaultUpperBoundTracesPerSecond = true && this.isSetDefaultUpperBoundTracesPerSecond();
    boolean that_present_defaultUpperBoundTracesPerSecond = true && that.isSetDefaultUpperBoundTracesPerSecond();
    if (this_present_defaultUpperBoundTracesPerSecond || that_present_defaultUpperBoundTracesPerSecond) {
      if (!(this_present_defaultUpperBoundTracesPerSecond && that_present_defaultUpperBoundTracesPerSecond))
        return false;
      if (this.defaultUpperBoundTracesPerSecond != that.defaultUpperBoundTracesPerSecond)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(defaultSamplingProbability);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(defaultLowerBoundTracesPerSecond);

    hashCode = hashCode * 8191 + ((isSetPerOperationStrategies()) ? 131071 : 524287);
    if (isSetPerOperationStrategies())
      hashCode = hashCode * 8191 + perOperationStrategies.hashCode();

    hashCode = hashCode * 8191 + ((isSetDefaultUpperBoundTracesPerSecond()) ? 131071 : 524287);
    if (isSetDefaultUpperBoundTracesPerSecond())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(defaultUpperBoundTracesPerSecond);

    return hashCode;
  }

  @Override
  public int compareTo(PerOperationSamplingStrategies other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDefaultSamplingProbability()).compareTo(other.isSetDefaultSamplingProbability());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultSamplingProbability()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultSamplingProbability, other.defaultSamplingProbability);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultLowerBoundTracesPerSecond()).compareTo(other.isSetDefaultLowerBoundTracesPerSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultLowerBoundTracesPerSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultLowerBoundTracesPerSecond, other.defaultLowerBoundTracesPerSecond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPerOperationStrategies()).compareTo(other.isSetPerOperationStrategies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerOperationStrategies()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perOperationStrategies, other.perOperationStrategies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDefaultUpperBoundTracesPerSecond()).compareTo(other.isSetDefaultUpperBoundTracesPerSecond());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultUpperBoundTracesPerSecond()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultUpperBoundTracesPerSecond, other.defaultUpperBoundTracesPerSecond);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PerOperationSamplingStrategies(");
    boolean first = true;

    sb.append("defaultSamplingProbability:");
    sb.append(this.defaultSamplingProbability);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultLowerBoundTracesPerSecond:");
    sb.append(this.defaultLowerBoundTracesPerSecond);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perOperationStrategies:");
    if (this.perOperationStrategies == null) {
      sb.append("null");
    } else {
      sb.append(this.perOperationStrategies);
    }
    first = false;
    if (isSetDefaultUpperBoundTracesPerSecond()) {
      if (!first) sb.append(", ");
      sb.append("defaultUpperBoundTracesPerSecond:");
      sb.append(this.defaultUpperBoundTracesPerSecond);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'defaultSamplingProbability' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'defaultLowerBoundTracesPerSecond' because it's a primitive and you chose the non-beans generator.
    if (perOperationStrategies == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'perOperationStrategies' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PerOperationSamplingStrategiesStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PerOperationSamplingStrategiesStandardScheme getScheme() {
      return new PerOperationSamplingStrategiesStandardScheme();
    }
  }

  private static class PerOperationSamplingStrategiesStandardScheme extends org.apache.thrift.scheme.StandardScheme<PerOperationSamplingStrategies> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PerOperationSamplingStrategies struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFAULT_SAMPLING_PROBABILITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultSamplingProbability = iprot.readDouble();
              struct.setDefaultSamplingProbabilityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEFAULT_LOWER_BOUND_TRACES_PER_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultLowerBoundTracesPerSecond = iprot.readDouble();
              struct.setDefaultLowerBoundTracesPerSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PER_OPERATION_STRATEGIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.perOperationStrategies = new java.util.ArrayList<OperationSamplingStrategy>(_list0.size);
                @org.apache.thrift.annotation.Nullable OperationSamplingStrategy _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new OperationSamplingStrategy();
                  _elem1.read(iprot);
                  struct.perOperationStrategies.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setPerOperationStrategiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_UPPER_BOUND_TRACES_PER_SECOND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultUpperBoundTracesPerSecond = iprot.readDouble();
              struct.setDefaultUpperBoundTracesPerSecondIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetDefaultSamplingProbability()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultSamplingProbability' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDefaultLowerBoundTracesPerSecond()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'defaultLowerBoundTracesPerSecond' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PerOperationSamplingStrategies struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEFAULT_SAMPLING_PROBABILITY_FIELD_DESC);
      oprot.writeDouble(struct.defaultSamplingProbability);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DEFAULT_LOWER_BOUND_TRACES_PER_SECOND_FIELD_DESC);
      oprot.writeDouble(struct.defaultLowerBoundTracesPerSecond);
      oprot.writeFieldEnd();
      if (struct.perOperationStrategies != null) {
        oprot.writeFieldBegin(PER_OPERATION_STRATEGIES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.perOperationStrategies.size()));
          for (OperationSamplingStrategy _iter3 : struct.perOperationStrategies)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultUpperBoundTracesPerSecond()) {
        oprot.writeFieldBegin(DEFAULT_UPPER_BOUND_TRACES_PER_SECOND_FIELD_DESC);
        oprot.writeDouble(struct.defaultUpperBoundTracesPerSecond);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PerOperationSamplingStrategiesTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PerOperationSamplingStrategiesTupleScheme getScheme() {
      return new PerOperationSamplingStrategiesTupleScheme();
    }
  }

  private static class PerOperationSamplingStrategiesTupleScheme extends org.apache.thrift.scheme.TupleScheme<PerOperationSamplingStrategies> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PerOperationSamplingStrategies struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeDouble(struct.defaultSamplingProbability);
      oprot.writeDouble(struct.defaultLowerBoundTracesPerSecond);
      {
        oprot.writeI32(struct.perOperationStrategies.size());
        for (OperationSamplingStrategy _iter4 : struct.perOperationStrategies)
        {
          _iter4.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDefaultUpperBoundTracesPerSecond()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDefaultUpperBoundTracesPerSecond()) {
        oprot.writeDouble(struct.defaultUpperBoundTracesPerSecond);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PerOperationSamplingStrategies struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.defaultSamplingProbability = iprot.readDouble();
      struct.setDefaultSamplingProbabilityIsSet(true);
      struct.defaultLowerBoundTracesPerSecond = iprot.readDouble();
      struct.setDefaultLowerBoundTracesPerSecondIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.perOperationStrategies = new java.util.ArrayList<OperationSamplingStrategy>(_list5.size);
        @org.apache.thrift.annotation.Nullable OperationSamplingStrategy _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new OperationSamplingStrategy();
          _elem6.read(iprot);
          struct.perOperationStrategies.add(_elem6);
        }
      }
      struct.setPerOperationStrategiesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.defaultUpperBoundTracesPerSecond = iprot.readDouble();
        struct.setDefaultUpperBoundTracesPerSecondIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

