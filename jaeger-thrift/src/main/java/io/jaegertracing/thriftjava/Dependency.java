/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.thriftjava;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-08-03")
public class Dependency {

  public interface Iface {

    public Dependencies getDependenciesForTrace(java.lang.String traceId) throws org.apache.thrift.TException;

    public void saveDependencies(Dependencies dependencies) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getDependenciesForTrace(java.lang.String traceId, org.apache.thrift.async.AsyncMethodCallback<Dependencies> resultHandler) throws org.apache.thrift.TException;

    public void saveDependencies(Dependencies dependencies, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Dependencies getDependenciesForTrace(java.lang.String traceId) throws org.apache.thrift.TException
    {
      send_getDependenciesForTrace(traceId);
      return recv_getDependenciesForTrace();
    }

    public void send_getDependenciesForTrace(java.lang.String traceId) throws org.apache.thrift.TException
    {
      getDependenciesForTrace_args args = new getDependenciesForTrace_args();
      args.setTraceId(traceId);
      sendBase("getDependenciesForTrace", args);
    }

    public Dependencies recv_getDependenciesForTrace() throws org.apache.thrift.TException
    {
      getDependenciesForTrace_result result = new getDependenciesForTrace_result();
      receiveBase(result, "getDependenciesForTrace");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDependenciesForTrace failed: unknown result");
    }

    public void saveDependencies(Dependencies dependencies) throws org.apache.thrift.TException
    {
      send_saveDependencies(dependencies);
    }

    public void send_saveDependencies(Dependencies dependencies) throws org.apache.thrift.TException
    {
      saveDependencies_args args = new saveDependencies_args();
      args.setDependencies(dependencies);
      sendBaseOneway("saveDependencies", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getDependenciesForTrace(java.lang.String traceId, org.apache.thrift.async.AsyncMethodCallback<Dependencies> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDependenciesForTrace_call method_call = new getDependenciesForTrace_call(traceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDependenciesForTrace_call extends org.apache.thrift.async.TAsyncMethodCall<Dependencies> {
      private java.lang.String traceId;
      public getDependenciesForTrace_call(java.lang.String traceId, org.apache.thrift.async.AsyncMethodCallback<Dependencies> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.traceId = traceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDependenciesForTrace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDependenciesForTrace_args args = new getDependenciesForTrace_args();
        args.setTraceId(traceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Dependencies getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDependenciesForTrace();
      }
    }

    public void saveDependencies(Dependencies dependencies, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveDependencies_call method_call = new saveDependencies_call(dependencies, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveDependencies_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Dependencies dependencies;
      public saveDependencies_call(Dependencies dependencies, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.dependencies = dependencies;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveDependencies", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        saveDependencies_args args = new saveDependencies_args();
        args.setDependencies(dependencies);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getDependenciesForTrace", new getDependenciesForTrace());
      processMap.put("saveDependencies", new saveDependencies());
      return processMap;
    }

    public static class getDependenciesForTrace<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDependenciesForTrace_args> {
      public getDependenciesForTrace() {
        super("getDependenciesForTrace");
      }

      public getDependenciesForTrace_args getEmptyArgsInstance() {
        return new getDependenciesForTrace_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getDependenciesForTrace_result getResult(I iface, getDependenciesForTrace_args args) throws org.apache.thrift.TException {
        getDependenciesForTrace_result result = new getDependenciesForTrace_result();
        result.success = iface.getDependenciesForTrace(args.traceId);
        return result;
      }
    }

    public static class saveDependencies<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveDependencies_args> {
      public saveDependencies() {
        super("saveDependencies");
      }

      public saveDependencies_args getEmptyArgsInstance() {
        return new saveDependencies_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, saveDependencies_args args) throws org.apache.thrift.TException {
        iface.saveDependencies(args.dependencies);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getDependenciesForTrace", new getDependenciesForTrace());
      processMap.put("saveDependencies", new saveDependencies());
      return processMap;
    }

    public static class getDependenciesForTrace<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDependenciesForTrace_args, Dependencies> {
      public getDependenciesForTrace() {
        super("getDependenciesForTrace");
      }

      public getDependenciesForTrace_args getEmptyArgsInstance() {
        return new getDependenciesForTrace_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Dependencies> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Dependencies>() { 
          public void onComplete(Dependencies o) {
            getDependenciesForTrace_result result = new getDependenciesForTrace_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDependenciesForTrace_result result = new getDependenciesForTrace_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDependenciesForTrace_args args, org.apache.thrift.async.AsyncMethodCallback<Dependencies> resultHandler) throws org.apache.thrift.TException {
        iface.getDependenciesForTrace(args.traceId,resultHandler);
      }
    }

    public static class saveDependencies<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveDependencies_args, Void> {
      public saveDependencies() {
        super("saveDependencies");
      }

      public saveDependencies_args getEmptyArgsInstance() {
        return new saveDependencies_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, saveDependencies_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.saveDependencies(args.dependencies,resultHandler);
      }
    }

  }

  public static class getDependenciesForTrace_args implements org.apache.thrift.TBase<getDependenciesForTrace_args, getDependenciesForTrace_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDependenciesForTrace_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDependenciesForTrace_args");

    private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDependenciesForTrace_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDependenciesForTrace_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String traceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRACE_ID((short)1, "traceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRACE_ID
            return TRACE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDependenciesForTrace_args.class, metaDataMap);
    }

    public getDependenciesForTrace_args() {
    }

    public getDependenciesForTrace_args(
      java.lang.String traceId)
    {
      this();
      this.traceId = traceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDependenciesForTrace_args(getDependenciesForTrace_args other) {
      if (other.isSetTraceId()) {
        this.traceId = other.traceId;
      }
    }

    public getDependenciesForTrace_args deepCopy() {
      return new getDependenciesForTrace_args(this);
    }

    @Override
    public void clear() {
      this.traceId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTraceId() {
      return this.traceId;
    }

    public getDependenciesForTrace_args setTraceId(@org.apache.thrift.annotation.Nullable java.lang.String traceId) {
      this.traceId = traceId;
      return this;
    }

    public void unsetTraceId() {
      this.traceId = null;
    }

    /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
    public boolean isSetTraceId() {
      return this.traceId != null;
    }

    public void setTraceIdIsSet(boolean value) {
      if (!value) {
        this.traceId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TRACE_ID:
        if (value == null) {
          unsetTraceId();
        } else {
          setTraceId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRACE_ID:
        return getTraceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRACE_ID:
        return isSetTraceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDependenciesForTrace_args)
        return this.equals((getDependenciesForTrace_args)that);
      return false;
    }

    public boolean equals(getDependenciesForTrace_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_traceId = true && this.isSetTraceId();
      boolean that_present_traceId = true && that.isSetTraceId();
      if (this_present_traceId || that_present_traceId) {
        if (!(this_present_traceId && that_present_traceId))
          return false;
        if (!this.traceId.equals(that.traceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTraceId()) ? 131071 : 524287);
      if (isSetTraceId())
        hashCode = hashCode * 8191 + traceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDependenciesForTrace_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTraceId()).compareTo(other.isSetTraceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTraceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, other.traceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDependenciesForTrace_args(");
      boolean first = true;

      sb.append("traceId:");
      if (this.traceId == null) {
        sb.append("null");
      } else {
        sb.append(this.traceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (traceId == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceId' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDependenciesForTrace_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDependenciesForTrace_argsStandardScheme getScheme() {
        return new getDependenciesForTrace_argsStandardScheme();
      }
    }

    private static class getDependenciesForTrace_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDependenciesForTrace_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDependenciesForTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRACE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.traceId = iprot.readString();
                struct.setTraceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDependenciesForTrace_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.traceId != null) {
          oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
          oprot.writeString(struct.traceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDependenciesForTrace_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDependenciesForTrace_argsTupleScheme getScheme() {
        return new getDependenciesForTrace_argsTupleScheme();
      }
    }

    private static class getDependenciesForTrace_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDependenciesForTrace_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDependenciesForTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        oprot.writeString(struct.traceId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDependenciesForTrace_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        struct.traceId = iprot.readString();
        struct.setTraceIdIsSet(true);
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDependenciesForTrace_result implements org.apache.thrift.TBase<getDependenciesForTrace_result, getDependenciesForTrace_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDependenciesForTrace_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDependenciesForTrace_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDependenciesForTrace_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDependenciesForTrace_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Dependencies success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dependencies.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDependenciesForTrace_result.class, metaDataMap);
    }

    public getDependenciesForTrace_result() {
    }

    public getDependenciesForTrace_result(
      Dependencies success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDependenciesForTrace_result(getDependenciesForTrace_result other) {
      if (other.isSetSuccess()) {
        this.success = new Dependencies(other.success);
      }
    }

    public getDependenciesForTrace_result deepCopy() {
      return new getDependenciesForTrace_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Dependencies getSuccess() {
      return this.success;
    }

    public getDependenciesForTrace_result setSuccess(@org.apache.thrift.annotation.Nullable Dependencies success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Dependencies)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDependenciesForTrace_result)
        return this.equals((getDependenciesForTrace_result)that);
      return false;
    }

    public boolean equals(getDependenciesForTrace_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDependenciesForTrace_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDependenciesForTrace_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDependenciesForTrace_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDependenciesForTrace_resultStandardScheme getScheme() {
        return new getDependenciesForTrace_resultStandardScheme();
      }
    }

    private static class getDependenciesForTrace_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDependenciesForTrace_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDependenciesForTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Dependencies();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDependenciesForTrace_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDependenciesForTrace_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDependenciesForTrace_resultTupleScheme getScheme() {
        return new getDependenciesForTrace_resultTupleScheme();
      }
    }

    private static class getDependenciesForTrace_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDependenciesForTrace_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDependenciesForTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDependenciesForTrace_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Dependencies();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveDependencies_args implements org.apache.thrift.TBase<saveDependencies_args, saveDependencies_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveDependencies_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveDependencies_args");

    private static final org.apache.thrift.protocol.TField DEPENDENCIES_FIELD_DESC = new org.apache.thrift.protocol.TField("dependencies", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveDependencies_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveDependencies_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Dependencies dependencies; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEPENDENCIES((short)1, "dependencies");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEPENDENCIES
            return DEPENDENCIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEPENDENCIES, new org.apache.thrift.meta_data.FieldMetaData("dependencies", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Dependencies.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveDependencies_args.class, metaDataMap);
    }

    public saveDependencies_args() {
    }

    public saveDependencies_args(
      Dependencies dependencies)
    {
      this();
      this.dependencies = dependencies;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveDependencies_args(saveDependencies_args other) {
      if (other.isSetDependencies()) {
        this.dependencies = new Dependencies(other.dependencies);
      }
    }

    public saveDependencies_args deepCopy() {
      return new saveDependencies_args(this);
    }

    @Override
    public void clear() {
      this.dependencies = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Dependencies getDependencies() {
      return this.dependencies;
    }

    public saveDependencies_args setDependencies(@org.apache.thrift.annotation.Nullable Dependencies dependencies) {
      this.dependencies = dependencies;
      return this;
    }

    public void unsetDependencies() {
      this.dependencies = null;
    }

    /** Returns true if field dependencies is set (has been assigned a value) and false otherwise */
    public boolean isSetDependencies() {
      return this.dependencies != null;
    }

    public void setDependenciesIsSet(boolean value) {
      if (!value) {
        this.dependencies = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DEPENDENCIES:
        if (value == null) {
          unsetDependencies();
        } else {
          setDependencies((Dependencies)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DEPENDENCIES:
        return getDependencies();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DEPENDENCIES:
        return isSetDependencies();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveDependencies_args)
        return this.equals((saveDependencies_args)that);
      return false;
    }

    public boolean equals(saveDependencies_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dependencies = true && this.isSetDependencies();
      boolean that_present_dependencies = true && that.isSetDependencies();
      if (this_present_dependencies || that_present_dependencies) {
        if (!(this_present_dependencies && that_present_dependencies))
          return false;
        if (!this.dependencies.equals(that.dependencies))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDependencies()) ? 131071 : 524287);
      if (isSetDependencies())
        hashCode = hashCode * 8191 + dependencies.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveDependencies_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDependencies()).compareTo(other.isSetDependencies());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDependencies()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dependencies, other.dependencies);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveDependencies_args(");
      boolean first = true;

      sb.append("dependencies:");
      if (this.dependencies == null) {
        sb.append("null");
      } else {
        sb.append(this.dependencies);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dependencies != null) {
        dependencies.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveDependencies_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveDependencies_argsStandardScheme getScheme() {
        return new saveDependencies_argsStandardScheme();
      }
    }

    private static class saveDependencies_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveDependencies_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveDependencies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEPENDENCIES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dependencies = new Dependencies();
                struct.dependencies.read(iprot);
                struct.setDependenciesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveDependencies_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dependencies != null) {
          oprot.writeFieldBegin(DEPENDENCIES_FIELD_DESC);
          struct.dependencies.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveDependencies_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveDependencies_argsTupleScheme getScheme() {
        return new saveDependencies_argsTupleScheme();
      }
    }

    private static class saveDependencies_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveDependencies_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveDependencies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDependencies()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDependencies()) {
          struct.dependencies.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveDependencies_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dependencies = new Dependencies();
          struct.dependencies.read(iprot);
          struct.setDependenciesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
