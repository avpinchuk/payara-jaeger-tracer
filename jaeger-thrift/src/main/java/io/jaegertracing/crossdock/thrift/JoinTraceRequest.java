/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.crossdock.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-08-03")
public class JoinTraceRequest implements org.apache.thrift.TBase<JoinTraceRequest, JoinTraceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<JoinTraceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JoinTraceRequest");

  private static final org.apache.thrift.protocol.TField SERVER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverRole", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DOWNSTREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("downstream", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new JoinTraceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new JoinTraceRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String serverRole; // required
  public @org.apache.thrift.annotation.Nullable Downstream downstream; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_ROLE((short)1, "serverRole"),
    DOWNSTREAM((short)2, "downstream");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_ROLE
          return SERVER_ROLE;
        case 2: // DOWNSTREAM
          return DOWNSTREAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.DOWNSTREAM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("serverRole", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNSTREAM, new org.apache.thrift.meta_data.FieldMetaData("downstream", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Downstream.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JoinTraceRequest.class, metaDataMap);
  }

  public JoinTraceRequest() {
  }

  public JoinTraceRequest(
    java.lang.String serverRole)
  {
    this();
    this.serverRole = serverRole;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JoinTraceRequest(JoinTraceRequest other) {
    if (other.isSetServerRole()) {
      this.serverRole = other.serverRole;
    }
    if (other.isSetDownstream()) {
      this.downstream = new Downstream(other.downstream);
    }
  }

  public JoinTraceRequest deepCopy() {
    return new JoinTraceRequest(this);
  }

  @Override
  public void clear() {
    this.serverRole = null;
    this.downstream = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServerRole() {
    return this.serverRole;
  }

  public JoinTraceRequest setServerRole(@org.apache.thrift.annotation.Nullable java.lang.String serverRole) {
    this.serverRole = serverRole;
    return this;
  }

  public void unsetServerRole() {
    this.serverRole = null;
  }

  /** Returns true if field serverRole is set (has been assigned a value) and false otherwise */
  public boolean isSetServerRole() {
    return this.serverRole != null;
  }

  public void setServerRoleIsSet(boolean value) {
    if (!value) {
      this.serverRole = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Downstream getDownstream() {
    return this.downstream;
  }

  public JoinTraceRequest setDownstream(@org.apache.thrift.annotation.Nullable Downstream downstream) {
    this.downstream = downstream;
    return this;
  }

  public void unsetDownstream() {
    this.downstream = null;
  }

  /** Returns true if field downstream is set (has been assigned a value) and false otherwise */
  public boolean isSetDownstream() {
    return this.downstream != null;
  }

  public void setDownstreamIsSet(boolean value) {
    if (!value) {
      this.downstream = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SERVER_ROLE:
      if (value == null) {
        unsetServerRole();
      } else {
        setServerRole((java.lang.String)value);
      }
      break;

    case DOWNSTREAM:
      if (value == null) {
        unsetDownstream();
      } else {
        setDownstream((Downstream)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_ROLE:
      return getServerRole();

    case DOWNSTREAM:
      return getDownstream();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_ROLE:
      return isSetServerRole();
    case DOWNSTREAM:
      return isSetDownstream();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof JoinTraceRequest)
      return this.equals((JoinTraceRequest)that);
    return false;
  }

  public boolean equals(JoinTraceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverRole = true && this.isSetServerRole();
    boolean that_present_serverRole = true && that.isSetServerRole();
    if (this_present_serverRole || that_present_serverRole) {
      if (!(this_present_serverRole && that_present_serverRole))
        return false;
      if (!this.serverRole.equals(that.serverRole))
        return false;
    }

    boolean this_present_downstream = true && this.isSetDownstream();
    boolean that_present_downstream = true && that.isSetDownstream();
    if (this_present_downstream || that_present_downstream) {
      if (!(this_present_downstream && that_present_downstream))
        return false;
      if (!this.downstream.equals(that.downstream))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServerRole()) ? 131071 : 524287);
    if (isSetServerRole())
      hashCode = hashCode * 8191 + serverRole.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownstream()) ? 131071 : 524287);
    if (isSetDownstream())
      hashCode = hashCode * 8191 + downstream.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(JoinTraceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerRole()).compareTo(other.isSetServerRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverRole, other.serverRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownstream()).compareTo(other.isSetDownstream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownstream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downstream, other.downstream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("JoinTraceRequest(");
    boolean first = true;

    sb.append("serverRole:");
    if (this.serverRole == null) {
      sb.append("null");
    } else {
      sb.append(this.serverRole);
    }
    first = false;
    if (isSetDownstream()) {
      if (!first) sb.append(", ");
      sb.append("downstream:");
      if (this.downstream == null) {
        sb.append("null");
      } else {
        sb.append(this.downstream);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serverRole == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverRole' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (downstream != null) {
      downstream.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JoinTraceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinTraceRequestStandardScheme getScheme() {
      return new JoinTraceRequestStandardScheme();
    }
  }

  private static class JoinTraceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<JoinTraceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JoinTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverRole = iprot.readString();
              struct.setServerRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOWNSTREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.downstream = new Downstream();
              struct.downstream.read(iprot);
              struct.setDownstreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JoinTraceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverRole != null) {
        oprot.writeFieldBegin(SERVER_ROLE_FIELD_DESC);
        oprot.writeString(struct.serverRole);
        oprot.writeFieldEnd();
      }
      if (struct.downstream != null) {
        if (struct.isSetDownstream()) {
          oprot.writeFieldBegin(DOWNSTREAM_FIELD_DESC);
          struct.downstream.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JoinTraceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public JoinTraceRequestTupleScheme getScheme() {
      return new JoinTraceRequestTupleScheme();
    }
  }

  private static class JoinTraceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<JoinTraceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JoinTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serverRole);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDownstream()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetDownstream()) {
        struct.downstream.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JoinTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serverRole = iprot.readString();
      struct.setServerRoleIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.downstream = new Downstream();
        struct.downstream.read(iprot);
        struct.setDownstreamIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

