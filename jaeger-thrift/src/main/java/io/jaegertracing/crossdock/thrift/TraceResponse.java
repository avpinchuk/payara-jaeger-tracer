/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.jaegertracing.crossdock.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Each server must include the information about the span it observed.
 * It can only be omitted from the response if notImplementedError field is not empty.
 * If the server was instructed to make a downstream call, it must embed the
 * downstream response in its own response.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-08-03")
public class TraceResponse implements org.apache.thrift.TBase<TraceResponse, TraceResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TraceResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TraceResponse");

  private static final org.apache.thrift.protocol.TField SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("span", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DOWNSTREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("downstream", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NOT_IMPLEMENTED_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("notImplementedError", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TraceResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TraceResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable ObservedSpan span; // optional
  public @org.apache.thrift.annotation.Nullable TraceResponse downstream; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String notImplementedError; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPAN((short)1, "span"),
    DOWNSTREAM((short)2, "downstream"),
    NOT_IMPLEMENTED_ERROR((short)3, "notImplementedError");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPAN
          return SPAN;
        case 2: // DOWNSTREAM
          return DOWNSTREAM;
        case 3: // NOT_IMPLEMENTED_ERROR
          return NOT_IMPLEMENTED_ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SPAN,_Fields.DOWNSTREAM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPAN, new org.apache.thrift.meta_data.FieldMetaData("span", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ObservedSpan.class)));
    tmpMap.put(_Fields.DOWNSTREAM, new org.apache.thrift.meta_data.FieldMetaData("downstream", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "TraceResponse")));
    tmpMap.put(_Fields.NOT_IMPLEMENTED_ERROR, new org.apache.thrift.meta_data.FieldMetaData("notImplementedError", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TraceResponse.class, metaDataMap);
  }

  public TraceResponse() {
  }

  public TraceResponse(
    java.lang.String notImplementedError)
  {
    this();
    this.notImplementedError = notImplementedError;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TraceResponse(TraceResponse other) {
    if (other.isSetSpan()) {
      this.span = new ObservedSpan(other.span);
    }
    if (other.isSetDownstream()) {
      this.downstream = new TraceResponse(other.downstream);
    }
    if (other.isSetNotImplementedError()) {
      this.notImplementedError = other.notImplementedError;
    }
  }

  public TraceResponse deepCopy() {
    return new TraceResponse(this);
  }

  @Override
  public void clear() {
    this.span = null;
    this.downstream = null;
    this.notImplementedError = null;
  }

  @org.apache.thrift.annotation.Nullable
  public ObservedSpan getSpan() {
    return this.span;
  }

  public TraceResponse setSpan(@org.apache.thrift.annotation.Nullable ObservedSpan span) {
    this.span = span;
    return this;
  }

  public void unsetSpan() {
    this.span = null;
  }

  /** Returns true if field span is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan() {
    return this.span != null;
  }

  public void setSpanIsSet(boolean value) {
    if (!value) {
      this.span = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TraceResponse getDownstream() {
    return this.downstream;
  }

  public TraceResponse setDownstream(@org.apache.thrift.annotation.Nullable TraceResponse downstream) {
    this.downstream = downstream;
    return this;
  }

  public void unsetDownstream() {
    this.downstream = null;
  }

  /** Returns true if field downstream is set (has been assigned a value) and false otherwise */
  public boolean isSetDownstream() {
    return this.downstream != null;
  }

  public void setDownstreamIsSet(boolean value) {
    if (!value) {
      this.downstream = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNotImplementedError() {
    return this.notImplementedError;
  }

  public TraceResponse setNotImplementedError(@org.apache.thrift.annotation.Nullable java.lang.String notImplementedError) {
    this.notImplementedError = notImplementedError;
    return this;
  }

  public void unsetNotImplementedError() {
    this.notImplementedError = null;
  }

  /** Returns true if field notImplementedError is set (has been assigned a value) and false otherwise */
  public boolean isSetNotImplementedError() {
    return this.notImplementedError != null;
  }

  public void setNotImplementedErrorIsSet(boolean value) {
    if (!value) {
      this.notImplementedError = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SPAN:
      if (value == null) {
        unsetSpan();
      } else {
        setSpan((ObservedSpan)value);
      }
      break;

    case DOWNSTREAM:
      if (value == null) {
        unsetDownstream();
      } else {
        setDownstream((TraceResponse)value);
      }
      break;

    case NOT_IMPLEMENTED_ERROR:
      if (value == null) {
        unsetNotImplementedError();
      } else {
        setNotImplementedError((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SPAN:
      return getSpan();

    case DOWNSTREAM:
      return getDownstream();

    case NOT_IMPLEMENTED_ERROR:
      return getNotImplementedError();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SPAN:
      return isSetSpan();
    case DOWNSTREAM:
      return isSetDownstream();
    case NOT_IMPLEMENTED_ERROR:
      return isSetNotImplementedError();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TraceResponse)
      return this.equals((TraceResponse)that);
    return false;
  }

  public boolean equals(TraceResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_span = true && this.isSetSpan();
    boolean that_present_span = true && that.isSetSpan();
    if (this_present_span || that_present_span) {
      if (!(this_present_span && that_present_span))
        return false;
      if (!this.span.equals(that.span))
        return false;
    }

    boolean this_present_downstream = true && this.isSetDownstream();
    boolean that_present_downstream = true && that.isSetDownstream();
    if (this_present_downstream || that_present_downstream) {
      if (!(this_present_downstream && that_present_downstream))
        return false;
      if (!this.downstream.equals(that.downstream))
        return false;
    }

    boolean this_present_notImplementedError = true && this.isSetNotImplementedError();
    boolean that_present_notImplementedError = true && that.isSetNotImplementedError();
    if (this_present_notImplementedError || that_present_notImplementedError) {
      if (!(this_present_notImplementedError && that_present_notImplementedError))
        return false;
      if (!this.notImplementedError.equals(that.notImplementedError))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSpan()) ? 131071 : 524287);
    if (isSetSpan())
      hashCode = hashCode * 8191 + span.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownstream()) ? 131071 : 524287);
    if (isSetDownstream())
      hashCode = hashCode * 8191 + downstream.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotImplementedError()) ? 131071 : 524287);
    if (isSetNotImplementedError())
      hashCode = hashCode * 8191 + notImplementedError.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TraceResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSpan()).compareTo(other.isSetSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span, other.span);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownstream()).compareTo(other.isSetDownstream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownstream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downstream, other.downstream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotImplementedError()).compareTo(other.isSetNotImplementedError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotImplementedError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notImplementedError, other.notImplementedError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TraceResponse(");
    boolean first = true;

    if (isSetSpan()) {
      sb.append("span:");
      if (this.span == null) {
        sb.append("null");
      } else {
        sb.append(this.span);
      }
      first = false;
    }
    if (isSetDownstream()) {
      if (!first) sb.append(", ");
      sb.append("downstream:");
      if (this.downstream == null) {
        sb.append("null");
      } else {
        sb.append(this.downstream);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("notImplementedError:");
    if (this.notImplementedError == null) {
      sb.append("null");
    } else {
      sb.append(this.notImplementedError);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (notImplementedError == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'notImplementedError' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (span != null) {
      span.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TraceResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TraceResponseStandardScheme getScheme() {
      return new TraceResponseStandardScheme();
    }
  }

  private static class TraceResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<TraceResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TraceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.span = new ObservedSpan();
              struct.span.read(iprot);
              struct.setSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DOWNSTREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.downstream = new TraceResponse();
              struct.downstream.read(iprot);
              struct.setDownstreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOT_IMPLEMENTED_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notImplementedError = iprot.readString();
              struct.setNotImplementedErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TraceResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.span != null) {
        if (struct.isSetSpan()) {
          oprot.writeFieldBegin(SPAN_FIELD_DESC);
          struct.span.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downstream != null) {
        if (struct.isSetDownstream()) {
          oprot.writeFieldBegin(DOWNSTREAM_FIELD_DESC);
          struct.downstream.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.notImplementedError != null) {
        oprot.writeFieldBegin(NOT_IMPLEMENTED_ERROR_FIELD_DESC);
        oprot.writeString(struct.notImplementedError);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TraceResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TraceResponseTupleScheme getScheme() {
      return new TraceResponseTupleScheme();
    }
  }

  private static class TraceResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<TraceResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TraceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.notImplementedError);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSpan()) {
        optionals.set(0);
      }
      if (struct.isSetDownstream()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSpan()) {
        struct.span.write(oprot);
      }
      if (struct.isSetDownstream()) {
        struct.downstream.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TraceResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.notImplementedError = iprot.readString();
      struct.setNotImplementedErrorIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.span = new ObservedSpan();
        struct.span.read(iprot);
        struct.setSpanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.downstream = new TraceResponse();
        struct.downstream.read(iprot);
        struct.setDownstreamIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

