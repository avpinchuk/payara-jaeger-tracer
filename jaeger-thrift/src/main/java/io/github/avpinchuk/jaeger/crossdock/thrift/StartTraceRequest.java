/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package io.github.avpinchuk.jaeger.crossdock.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2020-08-03")
public class StartTraceRequest implements org.apache.thrift.TBase<StartTraceRequest, StartTraceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<StartTraceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartTraceRequest");

  private static final org.apache.thrift.protocol.TField SERVER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("serverRole", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SAMPLED_FIELD_DESC = new org.apache.thrift.protocol.TField("sampled", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField BAGGAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("baggage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOWNSTREAM_FIELD_DESC = new org.apache.thrift.protocol.TField("downstream", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartTraceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartTraceRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String serverRole; // required
  public boolean sampled; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String baggage; // required
  public @org.apache.thrift.annotation.Nullable Downstream downstream; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_ROLE((short)1, "serverRole"),
    SAMPLED((short)2, "sampled"),
    BAGGAGE((short)3, "baggage"),
    DOWNSTREAM((short)4, "downstream");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_ROLE
          return SERVER_ROLE;
        case 2: // SAMPLED
          return SAMPLED;
        case 3: // BAGGAGE
          return BAGGAGE;
        case 4: // DOWNSTREAM
          return DOWNSTREAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SAMPLED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("serverRole", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SAMPLED, new org.apache.thrift.meta_data.FieldMetaData("sampled", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BAGGAGE, new org.apache.thrift.meta_data.FieldMetaData("baggage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNSTREAM, new org.apache.thrift.meta_data.FieldMetaData("downstream", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Downstream.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartTraceRequest.class, metaDataMap);
  }

  public StartTraceRequest() {
  }

  public StartTraceRequest(
    java.lang.String serverRole,
    boolean sampled,
    java.lang.String baggage,
    Downstream downstream)
  {
    this();
    this.serverRole = serverRole;
    this.sampled = sampled;
    setSampledIsSet(true);
    this.baggage = baggage;
    this.downstream = downstream;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StartTraceRequest(StartTraceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServerRole()) {
      this.serverRole = other.serverRole;
    }
    this.sampled = other.sampled;
    if (other.isSetBaggage()) {
      this.baggage = other.baggage;
    }
    if (other.isSetDownstream()) {
      this.downstream = new Downstream(other.downstream);
    }
  }

  public StartTraceRequest deepCopy() {
    return new StartTraceRequest(this);
  }

  @Override
  public void clear() {
    this.serverRole = null;
    setSampledIsSet(false);
    this.sampled = false;
    this.baggage = null;
    this.downstream = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getServerRole() {
    return this.serverRole;
  }

  public StartTraceRequest setServerRole(@org.apache.thrift.annotation.Nullable java.lang.String serverRole) {
    this.serverRole = serverRole;
    return this;
  }

  public void unsetServerRole() {
    this.serverRole = null;
  }

  /** Returns true if field serverRole is set (has been assigned a value) and false otherwise */
  public boolean isSetServerRole() {
    return this.serverRole != null;
  }

  public void setServerRoleIsSet(boolean value) {
    if (!value) {
      this.serverRole = null;
    }
  }

  public boolean isSampled() {
    return this.sampled;
  }

  public StartTraceRequest setSampled(boolean sampled) {
    this.sampled = sampled;
    setSampledIsSet(true);
    return this;
  }

  public void unsetSampled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  /** Returns true if field sampled is set (has been assigned a value) and false otherwise */
  public boolean isSetSampled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  public void setSampledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBaggage() {
    return this.baggage;
  }

  public StartTraceRequest setBaggage(@org.apache.thrift.annotation.Nullable java.lang.String baggage) {
    this.baggage = baggage;
    return this;
  }

  public void unsetBaggage() {
    this.baggage = null;
  }

  /** Returns true if field baggage is set (has been assigned a value) and false otherwise */
  public boolean isSetBaggage() {
    return this.baggage != null;
  }

  public void setBaggageIsSet(boolean value) {
    if (!value) {
      this.baggage = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Downstream getDownstream() {
    return this.downstream;
  }

  public StartTraceRequest setDownstream(@org.apache.thrift.annotation.Nullable Downstream downstream) {
    this.downstream = downstream;
    return this;
  }

  public void unsetDownstream() {
    this.downstream = null;
  }

  /** Returns true if field downstream is set (has been assigned a value) and false otherwise */
  public boolean isSetDownstream() {
    return this.downstream != null;
  }

  public void setDownstreamIsSet(boolean value) {
    if (!value) {
      this.downstream = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SERVER_ROLE:
      if (value == null) {
        unsetServerRole();
      } else {
        setServerRole((java.lang.String)value);
      }
      break;

    case SAMPLED:
      if (value == null) {
        unsetSampled();
      } else {
        setSampled((java.lang.Boolean)value);
      }
      break;

    case BAGGAGE:
      if (value == null) {
        unsetBaggage();
      } else {
        setBaggage((java.lang.String)value);
      }
      break;

    case DOWNSTREAM:
      if (value == null) {
        unsetDownstream();
      } else {
        setDownstream((Downstream)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_ROLE:
      return getServerRole();

    case SAMPLED:
      return isSampled();

    case BAGGAGE:
      return getBaggage();

    case DOWNSTREAM:
      return getDownstream();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SERVER_ROLE:
      return isSetServerRole();
    case SAMPLED:
      return isSetSampled();
    case BAGGAGE:
      return isSetBaggage();
    case DOWNSTREAM:
      return isSetDownstream();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StartTraceRequest)
      return this.equals((StartTraceRequest)that);
    return false;
  }

  public boolean equals(StartTraceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_serverRole = true && this.isSetServerRole();
    boolean that_present_serverRole = true && that.isSetServerRole();
    if (this_present_serverRole || that_present_serverRole) {
      if (!(this_present_serverRole && that_present_serverRole))
        return false;
      if (!this.serverRole.equals(that.serverRole))
        return false;
    }

    boolean this_present_sampled = true;
    boolean that_present_sampled = true;
    if (this_present_sampled || that_present_sampled) {
      if (!(this_present_sampled && that_present_sampled))
        return false;
      if (this.sampled != that.sampled)
        return false;
    }

    boolean this_present_baggage = true && this.isSetBaggage();
    boolean that_present_baggage = true && that.isSetBaggage();
    if (this_present_baggage || that_present_baggage) {
      if (!(this_present_baggage && that_present_baggage))
        return false;
      if (!this.baggage.equals(that.baggage))
        return false;
    }

    boolean this_present_downstream = true && this.isSetDownstream();
    boolean that_present_downstream = true && that.isSetDownstream();
    if (this_present_downstream || that_present_downstream) {
      if (!(this_present_downstream && that_present_downstream))
        return false;
      if (!this.downstream.equals(that.downstream))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetServerRole()) ? 131071 : 524287);
    if (isSetServerRole())
      hashCode = hashCode * 8191 + serverRole.hashCode();

    hashCode = hashCode * 8191 + ((sampled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetBaggage()) ? 131071 : 524287);
    if (isSetBaggage())
      hashCode = hashCode * 8191 + baggage.hashCode();

    hashCode = hashCode * 8191 + ((isSetDownstream()) ? 131071 : 524287);
    if (isSetDownstream())
      hashCode = hashCode * 8191 + downstream.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StartTraceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetServerRole()).compareTo(other.isSetServerRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerRole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverRole, other.serverRole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampled()).compareTo(other.isSetSampled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampled, other.sampled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBaggage()).compareTo(other.isSetBaggage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaggage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baggage, other.baggage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDownstream()).compareTo(other.isSetDownstream());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownstream()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downstream, other.downstream);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StartTraceRequest(");
    boolean first = true;

    sb.append("serverRole:");
    if (this.serverRole == null) {
      sb.append("null");
    } else {
      sb.append(this.serverRole);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sampled:");
    sb.append(this.sampled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("baggage:");
    if (this.baggage == null) {
      sb.append("null");
    } else {
      sb.append(this.baggage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("downstream:");
    if (this.downstream == null) {
      sb.append("null");
    } else {
      sb.append(this.downstream);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (serverRole == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverRole' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sampled' because it's a primitive and you chose the non-beans generator.
    if (baggage == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'baggage' was not present! Struct: " + toString());
    }
    if (downstream == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'downstream' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (downstream != null) {
      downstream.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StartTraceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StartTraceRequestStandardScheme getScheme() {
      return new StartTraceRequestStandardScheme();
    }
  }

  private static class StartTraceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartTraceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StartTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_ROLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverRole = iprot.readString();
              struct.setServerRoleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SAMPLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sampled = iprot.readBool();
              struct.setSampledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BAGGAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baggage = iprot.readString();
              struct.setBaggageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOWNSTREAM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.downstream = new Downstream();
              struct.downstream.read(iprot);
              struct.setDownstreamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSampled()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sampled' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StartTraceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverRole != null) {
        oprot.writeFieldBegin(SERVER_ROLE_FIELD_DESC);
        oprot.writeString(struct.serverRole);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SAMPLED_FIELD_DESC);
      oprot.writeBool(struct.sampled);
      oprot.writeFieldEnd();
      if (struct.baggage != null) {
        oprot.writeFieldBegin(BAGGAGE_FIELD_DESC);
        oprot.writeString(struct.baggage);
        oprot.writeFieldEnd();
      }
      if (struct.downstream != null) {
        oprot.writeFieldBegin(DOWNSTREAM_FIELD_DESC);
        struct.downstream.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StartTraceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StartTraceRequestTupleScheme getScheme() {
      return new StartTraceRequestTupleScheme();
    }
  }

  private static class StartTraceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartTraceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StartTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.serverRole);
      oprot.writeBool(struct.sampled);
      oprot.writeString(struct.baggage);
      struct.downstream.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StartTraceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.serverRole = iprot.readString();
      struct.setServerRoleIsSet(true);
      struct.sampled = iprot.readBool();
      struct.setSampledIsSet(true);
      struct.baggage = iprot.readString();
      struct.setBaggageIsSet(true);
      struct.downstream = new Downstream();
      struct.downstream.read(iprot);
      struct.setDownstreamIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

